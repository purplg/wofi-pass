#!/bin/sh

[ -z "${TYPE_CMD}" ] && TYPE_CMD="wl-copy"
[ -z "${PASS_CMD}" ] && PASS_CMD="pass"
[ -z "${DMENU_CMD}" ] && DMENU_CMD="rofi -dmenu"
# [ -z "${DMENU_CMD}" ] && DMENU_CMD="wofi -i --dmenu"

set -eu

autotype=0
help=0
squash=0
type=0

_trim() {
    var="$*"
    # remove leading whitespace characters
    var="${var#"${var%%[![:space:]]*}"}"
    # remove trailing whitespace characters
    var="${var%"${var##*[![:space:]]}"}"
    printf '%s' "$var"
}

# the explicit newlines here are funky, but needed due to command substitution
# stripping trailing newlines so `printf '%s\n' "$line"` cannot be used
_parse_fields() {
  has_username=0
  fields="$(${PASS_CMD} show "$password" | tail -n +2 | cut -d: -f1 -s)"
  field_list="password
"
  for line in $fields; do
    if [ "$line" = "username" ]; then
      has_username=1
      field_list="$field_list$line
"
    elif [ "$line" = "otpauth" ]; then
      field_list="${field_list}OTP
"
    elif [ "$line" = autotype_always ]; then
      autotype=1
    else
      field_list="$field_list$line
"
    fi
  done
  if [ "$TYPE_CMD" = "wtype -" ] && [ "$has_username" -eq 1 ]; then
    printf "autotype
"
  fi
  printf '%s' "$field_list"
}

_pass_field() {
  _trim "$(${PASS_CMD} show "$password" | tail -n+2 | grep "^${*}:.*$" | cut -d: -f1 -s --complement)"
}

_pass_get() {
  if [ "$1" = "password" ]; then
    ${PASS_CMD} show "$password" | { IFS= read -r pass; printf %s "$pass"; }
  elif [ "$1" = "OTP" ]; then
    ${PASS_CMD} otp "$password" | tail -n1 | { IFS= read -r pass; printf %s "$pass"; }
  else
    _pass_field "$@"
  fi
}

_usage() {
  printf "Usage: wofi-pass [options]\n"
  printf "  -a, --autotype  autotype whatever entry is chosen\n"
  printf "  -h, --help  show this help message\n"
  printf "  -s, --squash  don't show field choice if password file only contains password\n"
  printf "  -t, --type  type the selection instead of copying to clipboard\n"
}

OPTS="$(getopt --options ahst --longoptions autotype,help,squash,type -n 'wofi-pass' -- "$@")"
eval set -- "$OPTS"
while true; do
  case "$1" in
    -a | --autotype  ) autotype=1; shift ;;
    -h | --help      ) help=1; shift ;;
    -s | --squash    ) squash=1; shift ;;
    -t | --type      ) TYPE_CMD="wtype -"; shift;;
    -- ) shift; break ;;
    * ) break ;;
  esac
done

if [ "$help" -eq 1 ]; then
  _usage >&2
  exit 0
fi

cd "${PASSWORD_STORE_DIR:-$HOME/.password-store}"
password_files="$(find . -name "*.gpg" | sed "s/^\.\/\(.*\)\.gpg$/\1/")"

password=$(printf '%s\n' "$password_files" | ${DMENU_CMD})
[ -n "$password" ] || exit
field_list="$(_parse_fields)"
field_count="$(printf '%s' "$field_list" | wc -l)"
if [ "$squash" -eq 1 ] && [ "$field_count" -eq 1 ]; then
  field="password"
elif [ "$autotype" -ne 1 ]; then
  field=$(printf '%s\n' "$field_list" | ${DMENU_CMD})
fi

if [ "$field" = "autotype" ] || [ "$autotype" -eq 1 ]; then
  username=$(_pass_get "username")
  password=$(_pass_get "password")
  printf '%s\t%s\n' "$username" "$password" | $TYPE_CMD
else
  _pass_get "$field" | $TYPE_CMD
fi
